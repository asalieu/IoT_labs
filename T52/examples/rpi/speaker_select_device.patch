From f8b4b671d088e570255081f99728e20d74c143d8 Mon Sep 17 00:00:00 2001
From: Bernd Kaiser <bk@dfjk.eu>
Date: Fri, 7 Oct 2016 09:58:02 +0200
Subject: [PATCH] select audio device

---
 index.js       | 10 +++++++++-
 src/binding.cc |  9 +++++++++
 3 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/index.js b/index.js
index bdfbb5a..e880270 100644
--- a/index.js
+++ b/index.js
@@ -147,6 +147,10 @@ Speaker.prototype._open = function () {
     debug('setting default %o: %o', 'signed', this.bitDepth != 8);
     this.signed = this.bitDepth != 8;
   }
+  if (null == this.device) {
+    debug('setting default %o: %o', 'device', undefined);
+    this.device = undefined;
+  }

   var format = exports.getFormat(this);
   if (null == format) {
@@ -163,7 +167,7 @@ Speaker.prototype._open = function () {
   // initialize the audio handle
   // TODO: open async?
   this.audio_handle = new Buffer(binding.sizeof_audio_output_t);
-  var r = binding.open(this.audio_handle, this.channels, this.sampleRate, format);
+  var r = binding.open(this.audio_handle, this.channels, this.sampleRate, format, this.device);
   if (0 !== r) {
     throw new Error('open() failed: ' + r);
   }
@@ -207,6 +211,10 @@ Speaker.prototype._format = function (opts) {
     debug('setting %o: %o', "samplesPerFrame", opts.samplesPerFrame);
     this.samplesPerFrame = opts.samplesPerFrame;
   }
+  if (null != opts.device) {
+    debug('setting %o: %o', "device", opts.device);
+    this.device = opts.device;
+  }
   if (null == opts.endianness || endianness == opts.endianness) {
     // no "endianness" specified or explicit native endianness
     this.endianness = endianness;
diff --git a/src/binding.cc b/src/binding.cc
index edc068b..9a7ce86 100644
--- a/src/binding.cc
+++ b/src/binding.cc
@@ -24,6 +24,9 @@ struct write_req {
 NAN_METHOD(Open) {
   Nan::EscapableHandleScope scope;
   int r;
+  char* device_argument;
+  v8::Local<v8::String> device_param;
+
   audio_output_t *ao = UnwrapPointer<audio_output_t *>(info[0]);
   memset(ao, 0, sizeof(audio_output_t));

@@ -31,6 +34,12 @@ NAN_METHOD(Open) {
   ao->rate = info[2]->Int32Value(); /* sample rate */
   ao->format = info[3]->Int32Value(); /* MPG123_ENC_* format */

+  if (!info[4]->IsUndefined()) {
+    v8::String::Utf8Value device_param(info[4]->ToString());
+    device_argument = const_cast<char*> ( std::string(*device_param).c_str() );
+    ao->device = device_argument;
+  }
+
   /* init_output() */
   r = mpg123_output_module_info.init_output(ao);
   if (r == 0) {
